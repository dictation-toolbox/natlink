# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

project_directory = os.path.join(os.path.abspath('..'))
src_directory = os.path.join(project_directory, "src")
sys.path.insert(0, src_directory)


# -- Project information -----------------------------------------------------

project = 'natlink'
copyright = '2021, Joel Gould, Quintijn Hoogenboom'
author = 'Joel Gould'


#Pfff should take the current version, or the version that is in CMakeLists.txt, with which the project is compiled.
# That makes it independent of the natlinkcore repository. Probably the best strategy.
def get_Natlink_Version_from_CMakeLists(directory, filename):
    """extract the release number from this project file.
    This number should be bumped when a new release/version is made
    """
    file_path = os.path.join(directory, filename)
    if not os.path.isfile(file_path):
        raise OSError(f'Not a valid file: {file_path}')
    with open(file_path, 'r', encoding='utf-8') as fp:
        for line in fp:
            if line.startswith("set(NATLINK_VERSION"):
                rel = line.split()[-1]
                rel = rel.strip()
                rel = rel.strip(')')
                rel = rel.strip()
                vers = '.'.join(rel.split('.')[:2])
                break
        else:
            raise OSError(f'Did not find a valid release/verson line in "{file_path}"')
        return rel, vers
    

release, version = get_Natlink_Version_from_CMakeLists(project_directory, "CMakeLists.txt")

print(f'natlink, version: "{version}", release: "{release}"')

# as it was before:::
# # The short X.Y version
# version = '1.1'
# # The full version, including alpha/beta/rc tags
# release = '1.1.0'


# ----------------------------------------------------------------------------
# Mock libraries that are only available on some platforms or with optional
# dependencies installed.

from mock import MagicMock

class Mock(MagicMock):
    @classmethod
    def __getattr__(cls, name):
        return MagicMock()


mock_modules = {
    'ctypes',
    'dtactions',  # DF: uncertain about this one.
    'pywintypes',
    'win32api',
    'win32clipboard',
    'win32com',
    'win32com.client',
    'win32com.shell',
    'win32con',
    'win32file',
    'win32gui',
    'win32process',
    'winreg',
    'winxpgui',
}
if sys.platform != 'win32':
    for module_name in mock_modules:
        sys.modules[module_name] = Mock()

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
# templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# Whether module names should be prepended to all object names.
add_module_names = False


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'natlinkdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'natlink.tex', 'Natlink Documentation',
     'Quintijn Hoogenboom', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'natlink', 'natlink Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'natlink', 'Natlink Documentation',
     author, 'natlink',
     'Core of the Natlink project, connecting Dragon with python.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
# intersphinx_mapping = {'https://docs.python.org/': None}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True
