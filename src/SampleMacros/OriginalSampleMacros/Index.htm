<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<HTML>
	<HEAD>
		<TITLE>NatLink Sample Macros</TITLE>
	</HEAD>
	<LINK href='wiki.css' type='text/css' rel='stylesheet'>
	<body>
						<table cellpadding='2' cellspacing='1' class='TableClass' ID="Table9">
							<tr>
								<td class='TableCell' align='center' colspan='2'>Sample / Tutorial Macros</td>
							</tr>
							<tr>
								<td class='TableCellHighlighted'>Name</td>
								<td class='TableCellHighlighted'>Description</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="_sample1.py">_sample1.py</a></td>
								<td class='TableCell'>This file represents the simplest possible example of a 
									NatLink macro</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="_sample2.py">_sample2.py</a></td>
								<td class='TableCell'>This file demonstrates having two commands in one grammar. 
									NatLink knows which rule was recognized and calls the appropiate handling 
									function (gotResults_xxx)</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="_sample3.py">_sample3.py</a></td>
								<td class='TableCell'>This is a sample macro file used to demonstrate how NatLink 
									calls result functions (gotResults_xxx) based on which words were recognized</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="_sample4.py">_sample4.py</a></td>
								<td class='TableCell'>simple macro file demostrating mouse movement</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="_sample5.py">_sample5.py</a></td>
								<td class='TableCell'>Demonstrates how to use the clipboard to communicate 
									between your application and Python code</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="natspeak_sample6.py">natspeak_sample6.py</a></td>
								<td class='TableCell'>Demonstrates how to write application specific code</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="excel_sample7.py">excel_sample7.py</a></td>
								<td class='TableCell'>using OLE Automation to control Excel from Python macros</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="_sample8.py">_sample8.py</a></td>
								<td class='TableCell'>Demonstrates how to use &lt;<strong>dgndictation</strong>&gt;</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="_globals.py">_globals.py</a></td>
								<td class='TableCell'>Sample macro file which is active all the time (not 
									application specific)</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="_mouse.py">_mouse.py</a></td>
								<td class='TableCell'>Implements mouse and keyboard movement modes similar to DragonDictate for Windows</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="_sample9.py">_sample9.py</a></td>
								<td class='TableCell'>demonstrates how to create code to run at startup"</td>
							</tr>
						</table>
						<h1></h1>
						<table cellpadding='2' cellspacing='1' class='TableClass' ID="Table10">
							<tr>
								<td class='TableCell' align='center' colspan='3'>Utility Macros</td>
							</tr>
							<tr>
								<td class='TableCellHighlighted'>Name</td>
								<td class='TableCellHighlighted'>Description</td>
								<td class='TableCell'>Status</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="trainuser.py">trainuser.py</a></td>
								<td class='TableCell'>This is a sample python script which will create a new 
									trained user from a series of recorded sessions</td>
								<td class='TableCell'>unknown</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="transcribe.py">transcribe.py</a></td>
								<td class='TableCell'>This is a sample python script which will transcribe a 
									directory of compressed wave files from a mobile recorder</td>
								<td class='TableCell'>unknown</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="windict.py">windict.py</a></td>
								<td class='TableCell'>This is a sample Python program which demonstrates how to 
									use the dictation object in a Python program. The user interface for this 
									programn is based on the PythonWin (win32) extensions</td>
								<td class='TableCell'>unknown</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="winspch.py">winspch.py</a></td>
								<td class='TableCell'>This is a sample of adding grammar based speech recognition 
									to a simple Python application written using the Python win32 libraries</td>
								<td class='TableCell'>unknown</td>
							</tr>
							<tr>
								<td class='TableCell'><a href="wordpad.py">wordpad.py</a></td>
								<td class='TableCell'>Sample macro file which is active when Microsoft WordPad is active</td>
								<td class='TableCell'>unknown</td>
							</tr>
						</table>
						<table cellpadding='2' cellspacing='1' class='TableClass' ID="Table11">
							<tr>
								<td class='TableCell'><a href=""></a></td>
								<td class='TableCell'></td>
								<td class='TableCell'></td>
							</tr>
						</table>
						<p>To use these macros you must copy them to the <strong>macrosystem</strong> directory.</p>
						<p>See also <a href="../Index.htm">
								NatLink MiscScripts</a></p>
				</td>
				<td valign='top' class='BorderRight'></td>
			</tr>
			<tr>
				<td valign='top' class='BorderBottom' colspan='3'></td>
			</tr>
		</table>
	</body>
</HTML>
